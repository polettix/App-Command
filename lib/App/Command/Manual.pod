=pod

=encoding utf8

=head1 NAME

App::Command::Manual - the details for using App::Command

=head1 INTRODUCTION

See L<App::Command::Tutorial> if you want to get started. Read on if you
look for the details.


=head1 NEW COMMANDS

Any command C<extends> the base class C<App::Command> via L<Moo>:

   package MyCommand;
   use Moo;
   extends 'App::Command;
   ...

This applies to sub-commands as well:

   package MyCommand::Foo::Bar;
   use Moo;
   extends 'App::Command';
   ...

The three lines above (i.e. without the C<...> part) will be assumed to
appear before all examples below, unless otherwise noted.

Deriving from C<App::Command> means that:

=over

=item *

the command class will get methods to manage the command and its
hierarchy, most notably to get the L</CONFIGURATION>;

=item *

implementing the customizations for a command will mostly require
overriding specific methods from the parent class.

=back

The rest of this section will deal with the latter point, i.e. what
should be overridden to get the associated behavior.

Due to the way L<Moo> manages the builders for the attributes, all
methods that start with C<BUILD_...> are I<required> to return a scalar,
even if the attribute is about a collection.

Overriding the C<BUILD_...> methods allows setting the default values
for I<instances>, but those values might be further overridden while
producing those instances. This mechanism is leveraged mostly by
L</SIMPLE COMMANDS>.

=head2 Naming The Command

There are a few methods that can be overridden to influence how the
command is named.

=head3 BUILD_name

This allows setting the command's name, as shown in the help. It is not
necessarily how it's possible to call the command, though; see
L</BUILD_supports> for this.

Example:

   sub BUILD_name { return 'foobar-baz' }

By default, the name is generated by the package name, stripping away
any L</name_prefix> (including the C<::>). For sub-commands, the name is
generated by default stripping away the parent command's package name
(with the C<::>).

=head3 BUILD_fqn

The I<Fully Qualified Name> for the command, usually formed to indicate
how deep in the hierarchy the command is. Can be set to any string.

Example:

   sub BUILD_fqn { return 'whatever' }

It should be rarely needed to fiddle with this.

By default, it is either the same as the C<name> (see L</BUILD_name>) or
formed from the parent's I<fqn>, a dot and the command's C<name>.

=head3 BUILD_supports

Get the list of supported aliases for the command. It requires a
reference to an array.

Example:

   # support being called as foo, bar, or baz
   sub BUILD_supports { return [qw< foo bar baz>] }

By default it includes the C<name> of the command (see L</BUILD_name>).
If overridden, the C<name> has to be explicitly included (unless
inconsistencies are acceptable).

=head3 name_prefix

Set the prefix to be stripped from a package name to auto-generate the
name of a command. Can be any string.

Example:

   # remove FabolousApp:: from package name to auto-generate name
   sub name_prefix { return 'FabolousApp' }

Defaults to C<App>.

=head2 Help System

It should normally not be necessary to fiddle with the help that is
automatically generated - at the end of the day, it's most of the point
of C<App::Command>.

=head3 generate_commands_command

Returns a valid C<App::Command> that can print the list of sub-commands
supported.

Example (leveraging L</generate_simple_commands>):

   sub generate_commands_command {
      my $self = shift;
      $self->generate_simple_commands(
         {
            help => 'list of supported subcommands',
            supports => [qw< commands cmds subcommands >],
            execute  => sub { print "Guess them by yourself!\n" },
         },
      );
   }

By default it returns a command that introspects the parent command and
lists all its children, with their associated C<help>.

=head3 generate_help_command

Returns a valid C<App::Command> that can print out the help for a
command.

Example (leveraging L</generate_simple_commands>):

   sub generate_help_command {
      my $self = shift;
      $self->generate_simple_commands(
         {
            help => 'provide help',
            supports => [qw< help aiuto aida >],
            execute  => sub { print "Go read the code!\n" },
         },
      );
   }

By default it returns a command that introspects the parent command and
generates a help for all the different aspects (children, parameters,
etc.).

=head2 Hierarchy Management

The following methods ease management of the command hierarchy if
needed (although this should not happen in general).

=head3 BUILD_children

Returns a reference to an array with the sub-commands of a
(sub-)command. Can be set to a false value or to the empty array to stop
looking for sub-commands and mark a command as a I<leaf>.

Example:

   sub BUILD_children { return 0 }

By default, children are generated as follows:

=over

=item *

a call to L</generate_help_command>

=item *

a call to L</generate_commands_command>

=item *

a call to L</simple_commands> (if exists), then generating the simple
commands from the answer;

=item *

a call to L</autodiscover_children>.

=back

=head3 autodiscover_children

Returns a list of children that are discovered automatically. This is
rarely overridden, because it's just as effective to override
L</BUILD_children>.

As an example, to disable the default auto-discovery mechanism:

   sub autodiscover_children { return }

By default, children of command in package `Foo::Bar` will be searched
as packages starting with `Foo::Bar::`, looked in the directories
present in C<@INC>.

=head3 simple_commands

Returns a list of hash references, each with the parameters suitable to
create a simple command. See L</SIMPLE COMMANDS> for the details of what
is allowed into these hash references.

Example:

   sub simple_commands {
      return (
         {
            help => 'show the current date and time',
            supports => [qw< date now >],
            parameters => [
               {
                  name => 'gm',
                  help => 'use GMT instead of local',
                  getopt => 'gm!',
                  environment => 'GALOOK_DATE_GM',
                  default => 0,
               },
            ],
            execute  => sub {
               my $self = shift;
               my $now = $self->c('gm') ? gmtime() : localtime();
               print {*STDOUT} $now, "\n";
            },
         },
         {
            help => 'show the current value for parameter foo',
            supports => [qw< show-foo >],
            execute => sub {
               my $self = shift;
               warn "foo is ", $self->c('foo') ? 'true' : 'false';
            },
         },
      );
   }

By default this method does not exist.

=head2 Configuration Management

The configuration system in C<App::Command> provides much of the
underlying functionality for not needing to handle multiple sources etc.
so overriding the associated methods might make using C<App::Command>
much less useful. For this reason, this part of the manual will be
extremely tight.

=head3 BUILD_parameters

This is a method that is actually expected to be overridden often, as it
sets the list of parameters that are accepted by the command. It is
expected to return a reference to an array, containing a hash reference
describing each allowed parameter.

Example:

   sub BUILD_parameters {
      return [
         {
            name        => 'config',
            help        => 'path to the configuration file',
            getopt      => 'config|c=s',
            environment => 'GALOOK_CONFIG',
            default     => undef,
         },
         {
            name        => 'foo',
            help        => 'foo for bar',
            getopt      => 'foo|f!',
            environment => 'GALOOK_FOO',
            default     => 1,               # --no-foo
         },
      ];
   } ## end sub BUILD_parameters

See L</PARAMETERS> for details on what can be put inside the hash
references.

=head3 BUILD_sources

Set the list of configuration sources with a reference to an array.

Example:

   # enable loading a JSON configuration file too
   sub BUILD_sources { return [qw< +CmdLine +Environment +JSON +Default >] }

By default, the enabled sources are C<+CmdLine>, C<+Environment>, and
C<+Default> in this order. See L</CONFIGURATION> for further details.

Sources can be provided as package names (which will be loaded if
necessary). Source names starting with C<+> (like all examples above)
are referred to the base namespace C<App::Command::Configuration>, so
for example C<+CmdLine> refers to package
C<App::Command::Configuration::CmdLine>, which is part of
C<App:Command>'s distribution.

=head3 BUILD_source_setup_for

Set some additional setup data for one or more sources, as a reference
to a hash.

As an example, the C<+CmdLine> source is based on L<Getopt::Long>, so
it's possible to set some preferences by associating them to the
C<+CmdLine> key.

Example:

   BUILD_source_setup_for {
      return {
         '+CmdLine' => {
            getopt_config => [qw< require_order passthrough>]
         }
      }
   }

The contents are dependent on each individual source.

=head3 BUILD_validator

Set the validator for the configuration, as a reference to a sub or as a
false value (in which case validation is disabled).

Example:

   # a very picky validator...
   sub BUILD_validator { return sub { die "NO! NO! NO!\n" } }

Validation is disabled by default.

=head2 Running the command

The actual execution of the command is done via C<execute>.

=head3 execute

This method is run after the parsing of the input options has been
performed, and configurations are ready to be queries. It is the
suggested way of setting a custom behaviour for a full-fledged command
implemented as a subclass of C<App::Command>.

Example:

   sub execute {
      my ($self, @other) = @_;
      print "Hello, world!\n";
   }


=head1 SIMPLE COMMANDS

The design of C<App::Command> allows mapping a hierarchy of commands and
sub-commands to a corresponding hierarchy of packages, but it needs not
to be in this way.

In particular, several times commands and sub-commands might be
implemented in terms of some metadata (like the command-line options,
etc.) and a single sub to provide the whole functionality. This is where
simple commands come into play.

Simple commands are defined by overriding L</simple_commands> and
returning a list of hash references, each describing one command. The
allowed keys are the following:

=over

=item C<execute>

a reference to a sub that is called when the command/subcommand is
invoked. The first argument is the reference to the C<App::Command>
object, so this is treated as if it were the instance's C<execute>
method. See also L</execute>.

=item C<fqn>

the Fully Qualified Name, see also L</BUILD_fqn>.

=item C<help>

a syntetic help message about the command. See also
L</generate_help_command>.

=item C<name>

the command's name, as it appears e.g. in the list of commands. See also
L</BUILD_name>.

=item C<parameters>

the list of supported parameters, as a reference to an array of hashes.
See L</BUILD_parameters> for the defaults, see L</PARAMETERS> for
details on the supported keys in the hash.

=item C<sources>

the list of input sources to assign values to parameters, as a reference
to an array of strings. See L</BUILD_sources> and L</CONFIGURATION>.

=item C<source_setup_for>

additional options for using the C<sources>, as a hash of hashes indexed
by source name.

=item C<supports>

a list of aliases for the command, including the main name, provided as
a reference to an array. See L</BUILD_supports>.

=item C<validator>

either a reference to a sub for performing the validation of the
configuration, or something valid for L<Params::Validate>.

For sub references, the function is passed the configuration as the only
parameter; the actual merged configuration is associated to key
C<merged>.

=back

Example:

      {
         help => 'show the current date and time',
         supports => [qw< date now >],
         parameters => [
            {
               name => 'gm',
               help => 'use GMT instead of local',
               getopt => 'gm!',
               environment => 'GALOOK_DATE_GM',
               default => 0,
            },
         ],
         execute  => sub {
            my $self = shift;
            my $now = $self->c('gm') ? gmtime() : localtime();
            print {*STDOUT} $now, "\n";
         },
      }

It is also possible to generate simple commands using the following
method.

=head2 generate_simple_commands

This method accepts one or more definitions for simple commands (see
above) and turns them into... simple commands. These commands are
returned as a list.

=head1 PARAMETERS

Input parameters for commands can come from several I<sources>.
C<App::Command> comes with support for taking the associated values from
the most common of them, with the possibility to extend it and include
other ones too (e.g. INI or YAML files).

The method L</BUILD_sources> and the corresponding L<< /C<sources> >> in
simple commands allows setting all sources and the order of precedence
for them. See L</BUILD_sources> for details.

Parameters are provided through either L</BUILD_parameters> or L<<
/C<parameters> >>, as a list of hashes, each detailing one single input
parameters.

The hash for describing a parameter supports the following keys:

=over

=item C<name> (parameter)

this is the name of the parameter, to be shown in help printings. If
missing, it is derived from C<getopt>, or from C<environment>, or is set
to the string C<~~~> (which would make little sense anyway).

=item C<help>

a help message to be shown when printing the help for the program.

=item C<getopt>

a definition compatible with L<Getopt::Long>. The first alias is used as
name if L<< /C<name> (parameter) >> above is not set.

=item C<environment>

the name of an environment variable.

=item C<default>

a default value.

=back

Additional keys might be added depending on the needs of other plugins
for handling sources.


=head1 CONFIGURATION

One of the points of C<App::Command> is to provide centralized and
automatic handling of input L</PARAMETERS>, exposing their values as a
I<configuration>.

The configuration can be seen as a hash whose values are populated
depending on the different sources, in the order they are defined in
L</BUILD_sources> or equivalent. There is no attempt at merging them at
the moment: for any given key, only the value from the highest
precedence source with that key is considered.

=head2 <configuration and c

Any command can access the configuration using method C<configuration>
or its alias C<c>, passing the name of the needed configuration.
Example:

   my $foo = $self->c('foo');

By default, configurations are looked for in parent commands too. This
allows e.g. to define common options in a higher level command (e.g.
where to place a log) and specific options in a sub-command, avoiding
repetitions. Hence, variable C<$foo> above might be populated by the
configuration associated to C<$self> or any parent command, if present.

It is possible to pass additional key/value parameters to the method:

=over

=item C<default>

sets a default value in case the specific configuration is not found. It
is also possible to pass a reference to a sub, in which case it will be
called with the same parameters as those provided to the method (this
allows e.g. to C<die> if parameters are missing);

=item C<parent>

boolean value to communicate whether it's OK to climb the hierarchy to
look for the configuration value. It is assumed to be a true value if
missing, otherwise whatever value is interpreted as a boolean.

=back

=head2 args

Anything that is I<not> interpreted as a command-line option is a
candidate sub-command or non-options for the command. It is possible to
reach these I<leftovers> through the method C<args>, which provides back
a list of the residual parameters.

As an example, the C<help> command that is automatically generated uses
this method to understand whether the help message to be printed should
be referred to a sub-command. Examples:

   # get help on command foo
   $ foo help

   # get help on sub-command bar
   $ foo help bar

   # ditto... unless bar is a simple command!
   $ foo bar help

=head2 bootstrap_configuration

Most if not all attributes are defined as I<lazy>, but sometimes it's
imperative that the configuration is actually populated (e.g. before
calling the L</execute> method).

Method C<bootstrap_configuration> allows making sure that the
options are properly parsed and the configuration properly set.


=cut
